{"version":3,"file":"index-m0l0iTo3.js","sources":["../../src/services/LocalStorageService.js","../../src/store/State.js","../../src/models/TaskFormModel.js","../../src/views/TaskListView.js","../../src/models/TaskFilterModel.js","../../src/controllers/AppController.js","../../src/main.js"],"sourcesContent":["/**\r\n * Handles saving and loading tasks from localStorage.\r\n */\r\nexport default class LocalStorage {\r\n  /**\r\n   * @param {string} [key='tasks'] - The key under which tasks are stored.\r\n   */\r\n  constructor(key = \"tasks\") {\r\n    this.key = key;\r\n  }\r\n\r\n  /**\r\n   * @returns {Array} Array of tasks, or an empty array if none are found or an error occurs.\r\n   */\r\n  loadTasks() {\r\n    try {\r\n      const tasks = localStorage.getItem(this.key);\r\n      return tasks ? JSON.parse(tasks) : [];\r\n    } catch (error) {\r\n      console.error(error.message);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array} tasks - The tasks to save.\r\n   * @throws {Error} If the input is not an array.\r\n   */\r\n  saveTasks(tasks) {\r\n    if (!Array.isArray(tasks)) {\r\n      throw new Error(\"Task should be an array.\");\r\n    }\r\n    localStorage.setItem(this.key, JSON.stringify(tasks));\r\n  }\r\n}\r\n","/**\r\n * Manages and manipulates application state data.\r\n */\r\nexport default class State {\r\n  /**\r\n   * @param {LocalStorage} localStorage - Instance to handle persistence.\r\n   */\r\n  constructor(localStorage) {\r\n    this.localStorage = localStorage;\r\n    this.tasks = this.localStorage.loadTasks();\r\n  }\r\n\r\n  /**\r\n   * @param {string} taskText - Text description of the task.\r\n   * @returns {void}\r\n   */\r\n  createTasks(taskText) {\r\n    const newTask = {\r\n      id: Date.now().toString(),\r\n      task: taskText,\r\n      completed: false,\r\n    };\r\n\r\n    this.tasks.push(newTask);\r\n    this.localStorage.saveTasks(this.tasks);\r\n  }\r\n\r\n  /**\r\n   * @param {string} taskId - ID of the task to delete.\r\n   * @returns {void}\r\n   */\r\n  deleteTask(taskId) {\r\n    this.tasks = this.tasks.filter((task) => task.id !== taskId);\r\n    this.localStorage.saveTasks(this.tasks);\r\n  }\r\n\r\n  /**\r\n   * @param {string} taskId - ID of the task to toggle.\r\n   * @returns {void}\r\n   */\r\n  toggleCompleted(taskId) {\r\n    const task = this.tasks.find((task) => task.id === taskId);\r\n    if (task) {\r\n      task.completed = !task.completed;\r\n      return this.localStorage.saveTasks(this.tasks);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} status - Status to filter by ('all', 'active', or 'completed').\r\n   * @returns {Array} Filtered array of tasks.\r\n   */\r\n  filterTasks(status) {\r\n    if (status === \"active\")\r\n      return this.tasks.filter((task) => task.completed === false);\r\n    if (status === \"completed\")\r\n      return this.tasks.filter((task) => task.completed === true);\r\n    return this.tasks;\r\n  }\r\n\r\n  getTasks() {\r\n    return this.tasks;\r\n  }\r\n}\r\n","/**\r\n * Handles logic related to the task form and task creation.\r\n */\r\nexport default class TaskFormModel {\r\n  /**\r\n   * @param {State} state - Application state instance for managing tasks.\r\n   */\r\n  constructor(state, taskListView) {\r\n    this.taskInput = document.querySelector(\".task-input\");\r\n    this.taskAddBtn = document.querySelector(\".task-add-btn\");\r\n    this.state = state;\r\n    this.taskListView = taskListView;\r\n  }\r\n\r\n  /**\r\n   * Adds event listener for creating a new task via the form.\r\n   */\r\n  addTask() {\r\n    this.taskAddBtn.addEventListener(\"click\", (e) => {\r\n      e.preventDefault();\r\n      this.state.createTasks(this.taskInput.value);\r\n      this.taskInput.value = \"\";\r\n      this.taskListView.renderTaskList(this.state.tasks);\r\n    });\r\n  }\r\n}\r\n","/**\r\n * Class responsible for rendering the list of task in the DOM.\r\n */\r\nexport default class TaskListView {\r\n  /**\r\n   * @param {object} state - The state object managing tasks and logic.\r\n   */\r\n  constructor(state) {\r\n    this.taskListContainer = document.querySelector(\".task-list\");\r\n    this.state = state;\r\n  }\r\n\r\n  /**\r\n   * Render the task list in the DOM.\r\n   * @param {Array} tasks - An array of task objects to render.\r\n   * @returns {void}\r\n   */\r\n  renderTaskList(tasks) {\r\n    this.taskListContainer.innerHTML = \"\";\r\n\r\n    tasks.forEach((task) => {\r\n      const taskContainer = document.createElement(\"li\");\r\n      taskContainer.className = \"task-container\";\r\n\r\n      const taskText = document.createElement(\"p\");\r\n      taskText.className = \"task-text\";\r\n      taskText.textContent = task.task;\r\n      taskText.style.textDecoration = task.completed ? \"line-through\" : \"none\";\r\n\r\n      const taskDelBtn = document.createElement(\"button\");\r\n      taskDelBtn.className = \"task-del-btn\";\r\n      taskDelBtn.textContent = \"X\";\r\n\r\n      // Event delegation inside the taskContainer\r\n      taskContainer.addEventListener(\"click\", (e) => {\r\n        if (e.target.className === \"task-del-btn\") {\r\n          this.state.deleteTask(task.id);\r\n          this.renderTaskList(this.state.tasks);\r\n          return;\r\n        }\r\n\r\n        this.state.toggleCompleted(task.id);\r\n        this.renderTaskList(this.state.tasks);\r\n      });\r\n\r\n      taskContainer.append(taskText, taskDelBtn);\r\n      this.taskListContainer.appendChild(taskContainer);\r\n    });\r\n  }\r\n}\r\n","export default class TaskFilterModel {\r\n  constructor(state, taskListView) {\r\n    this.filterBtn = document.querySelectorAll(\".filter-btn\");\r\n    this.state = state;\r\n    this.taskListView = taskListView;\r\n  }\r\n\r\n  handleFilterClick() {\r\n    this.filterBtn.forEach((btn) => {\r\n      btn.addEventListener(\"click\", (e) => {\r\n        this.filterBtn.forEach((b) => {\r\n          b.classList.remove(\"active\");\r\n          b.setAttribute(\"aria-pressed\", \"false\");\r\n        });\r\n\r\n        const clickedBtn = e.currentTarget;\r\n        clickedBtn.classList.add(\"active\");\r\n        clickedBtn.setAttribute(\"aria-pressed\", \"true\");\r\n\r\n        const status = e.target.dataset.filter;\r\n        const filteredTasks = this.state.filterTasks(status);\r\n        this.taskListView.renderTaskList(filteredTasks);\r\n      });\r\n    });\r\n  }\r\n}\r\n","import LocalStorage from \"../services/LocalStorageService\";\r\nimport State from \"../store/State\";\r\nimport TaskFormModel from \"../models/TaskFormModel\";\r\nimport TaskListView from \"../views/TaskListView\";\r\nimport TaskFilterModel from \"../models/TaskFilterModel\";\r\n\r\n/**\r\n * Main controller for initializing and managing application components.\r\n */\r\nexport default class AppController {\r\n  /**\r\n   * Creates a new instance of AppController.\r\n   */\r\n  constructor() {\r\n    this.localStorage = new LocalStorage();\r\n    this.state = new State(this.localStorage);\r\n    this.taskListView = new TaskListView(this.state);\r\n    this.taskFormModel = new TaskFormModel(this.state, this.taskListView);\r\n    this.taskFilterModel = new TaskFilterModel(this.state, this.taskListView);\r\n  }\r\n\r\n  /**\r\n   * Starts the application.\r\n   * @returns {void}\r\n   */\r\n  init() {\r\n    this.taskListView.renderTaskList(this.state.tasks);\r\n    this.taskFormModel.addTask();\r\n    this.taskFilterModel.handleFilterClick();\r\n  }\r\n}\r\n","import \"./styles/main.scss\";\r\nimport AppController from \"./controllers/AppController\";\r\n\r\nconst appController = new AppController();\r\nappController.init();\r\n"],"names":["LocalStorage","key","tasks","error","State","localStorage","taskText","newTask","taskId","task","status","TaskFormModel","state","taskListView","e","TaskListView","taskContainer","taskDelBtn","TaskFilterModel","btn","b","clickedBtn","filteredTasks","AppController","appController"],"mappings":"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"}